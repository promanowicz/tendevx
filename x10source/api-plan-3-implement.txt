```
Twoim zadaniem jest wdrożenie usługi Firebase w oparciu o podany plan wdrożenia. Twoim celem jest stworzenie solidnej i dobrze zorganizowanej implementacji, która zawiera odpowiednią walidację, obsługę błędów i podąża za wszystkimi logicznymi krokami opisanymi w planie.

Najpierw dokładnie przejrzyj dostarczony plan wdrożenia:

<implementation_plan>
@api-plan.md
</implementation_plan>

<types>
@database.types.ts
</types>


<implementation_approach>
Realizuj maksymalnie 3 kroki planu implementacji, podsumuj krótko co zrobiłeś i opisz plan na 3 kolejne działania - zatrzymaj w tym momencie pracę i czekaj na mój feedback.
</implementation_approach>

Wykonaj następujące kroki, aby zaimplementować usługę Firebase:

1. Przeanalizuj plan wdrożenia:
   - Określ typ operacji Firebase (np. addDoc, getDoc, updateDoc, deleteDoc)
   - Zidentyfikuj kolekcje Firestore ('users', 'campaigns', 'groups')
   - Określ wymagane relacje między dokumentami (np. referencje groups w Campaign)
   - Zrozumienie wymaganej logiki biznesowej i zabezpieczeń
   - Zwróć uwagę na aspekty związane z autentykacją Firebase

2. Rozpocznij implementację:
   - Zdefiniuj funkcję serwisową z odpowiednimi typami Firebase
   - Użyj poprawnych typów z database.types.ts
   - Zaimplementuj walidację danych wejściowych
   - Postępuj zgodnie z krokami z planu implementacji
   - Dodaj obsługę błędów Firebase
   - Implementuj odpowiednie operacje Firestore
   - Zachowaj spójność timestampów (createdAt, updatedAt)

3. Implementacja bezpieczeństwa:
   - Wykorzystaj Firebase Auth do weryfikacji użytkowników
   - Sprawdź uprawnienia do grup
   - Zweryfikuj relacje między dokumentami
   - Zaimplementuj reguły bezpieczeństwa Firestore

4. Transakcje i spójność danych:
   - Użyj transakcji Firestore dla operacji wielodokumentowych
   - Zapewnij atomowość operacji na powiązanych dokumentach
   - Zaimplementuj walidację referencji między dokumentami
   - Zachowaj spójność przy usuwaniu (np. aktualizacja groups)

5. Optymalizacja wydajności:
   - Zoptymalizuj zapytania Firestore
   - Użyj where() i limit() do filtrowania
   - Zastosuj indeksy dla często używanych zapytań
   - Zaimplementuj stronicowanie dla dużych kolekcji

6. Implementacja obsługi błędów:
   - Obsłuż specyficzne błędy Firebase (FirebaseError)
   - Zaimplementuj retry logic dla operacji sieciowych
   - Dodaj odpowiednie komunikaty błędów
   - Zachowaj spójność danych przy błędach

7. Integracja z Vue.js:
   - Użyj composables dla logiki Firebase
   - Zaimplementuj reaktywne zapytania
   - Dodaj odpowiednią obsługę stanu ładowania
   - Zintegruj z Pinia store

8. Dokumentacja:
   - Dodaj komentarze JSDoc dla funkcji
   - Opisz założenia bezpieczeństwa
   - Udokumentuj strukturę kolekcji
   - Wyjaśnij wzorce dostępu do danych

Po zakończeniu implementacji upewnij się, że:
- Kod jest zgodny z TypeScript i Vue.js 3
- Wszystkie operacje są typowane
- Zaimplementowano odpowiednią obsługę błędów
- Kod jest zoptymalizowany pod kątem wydajności
- Dokumentacja jest kompletna i aktualna

Przykład implementacji operacji w Firebase:

```typescript
import { db } from '@/db/firebase.client'
import { collection, addDoc, Timestamp } from 'firebase/firestore'
import type { Campaign } from '@/db/database.types'

async function createCampaign(campaignData: Omit<Campaign, 'uuid' | 'createdAt' | 'updatedAt'>) {
  const timestamp = Timestamp.now()
  
  const campaign: Omit<Campaign, 'uuid'> = {
    ...campaignData,
    createdAt: timestamp,
    updatedAt: timestamp
  }
  
  const docRef = await addDoc(collection(db, 'campaigns'), campaign)
  return {
    uuid: docRef.id,
    ...campaign
  }
}
```

Pamiętaj o:
- Używaniu typów z database.types.ts
- Zachowaniu spójności timestampów
- Poprawnym zarządzaniu referencjami dokumentów
- Implementacji odpowiednich reguł bezpieczeństwa
- Optymalizacji zapytań
- Właściwej obsłudze błędów Firebase
```
